internal class Program
{
    private static void Main(string[] args)
    {
        Good iPhone12 = new Good("IPhone 12");
        Good iPhone11 = new Good("IPhone 11");

        Warehouse warehouse = new Warehouse();

        Shop shop = new Shop(warehouse);

        warehouse.Delive(iPhone12, 10);
        warehouse.Delive(iPhone11, 1);

        Cart cart = shop.Cart();
        cart.Add(iPhone12, 4);
        cart.Add(iPhone11, 3);

        Console.WriteLine(cart.Order().Paylink);

        cart.Add(iPhone12, 9);
    }
}

public class Product
{
    public string Name { get; private set; }
    public Product(string name)
    {
        Name = name;
    }
}

public class Warehouse
{
    private readonly Dictionary<Product, int> _products = new Dictionary<Product, int>();

    public void DeliverProduct(Product product, int quantity)
    {
        if (quantity < 0)
            throw new ArgumentException("Количество не может быть отрицательным.");

        if (_products.ContainsKey(product))
            _products[product] += quantity;
        else
            _products[product] = quantity;
    }

    public int GetQuantity(Product product) => _products.TryGetValue(product, out var quantity) ? quantity : 0;

    public void RemoveProduct(Product product, int quantity)
    {
        if (_products.ContainsKey(product) == false || _products[product] < quantity)
            throw new InvalidOperationException($"Недостаточно {product.Name} на складе.");

        _products[product] -= quantity;
    }
}

public interface IWarehouse
{
    int GetQuantity(Good good);

    void Remove(Good good, int quantity);
}

public class Shop
{
    private readonly Warehouse _warehouse;

    public Shop(Warehouse warehouse)
    {
        _warehouse = warehouse;
    }

    public Cart GetCart() => new Cart(_warehouse);
}

public class Cart
{
    private readonly Warehouse _warehouse;
    private readonly Dictionary<Product, int> _products = new();

    public bool IsOrdered { get; private set; }

    public Cart(Warehouse warehouse)
    {
        _warehouse = warehouse;
    }

    public void AddProduct(Product product, int quantity)
    {
        if (IsOrdered)
            throw new InvalidOperationException("Заказ уже оформлен!!!");

        int current = _products.GetValueOrDefault(product, 0);
        int available = _warehouse.GetQuantity(product);

        if (current + quantity > available)
            throw new InvalidOperationException($"Недостаточно {product.Name} на складе.");

        _products[product] = current + quantity;
    }

    public Order GetOrder()
    {
        if (IsOrdered)
            throw new InvalidOperationException("Заказ уже оформлен!!!");

        foreach (var (product, quantity) in _products)
            _warehouse.RemoveProduct(product, quantity);

        IsOrdered = true;
        return new Order();
    }
}

public class Order
{
    public string Paylink { get; } = Guid.NewGuid().ToString();
}
